#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
{{define "worker.drain"}}
tasks:
  - name: wait-for-cfs
    templateRef:
      name: kubectl-and-curl-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            set -x
            TARGET_NCN={{ `{{inputs.parameters.targetNcn}}` }}
            echo "TARGET_NCN=${TARGET_NCN}"
            TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
            echo "TARGET_XNAME=${TARGET_XNAME}"
            TMPFILE=/tmp/tmpout.$(date +%Y%m%d_%H%M%S).$$.$RANDOM
            echo "TMPFILE=${TMPFILE}"

            set -o pipefail

            # Retry CFS command if needed
            COUNT=0
            while true; do
                curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components/${TARGET_XNAME}" > ${TMPFILE}
                rc=$?
                cat ${TMPFILE}
                echo "rc = $rc"
                ENABLED=$(cat ${TMPFILE} | jq -r '.enabled') && break
                let COUNT+=1
                if [[ ${COUNT} -gt 12 ]]; then
                    echo "ERROR: Even after retries, command pipeline failed querying CFS component '${TARGET_XNAME}'"
                    exit 1
                fi
                echo "WARNING: Command pipeline failed querying CFS component '${TARGET_XNAME}'. Retrying after 5 seconds."
                sleep 5
            done
            echo "ENABLED=$ENABLED"
            if [[ ${ENABLED} == false ]]; then
              exit 0
            elif [[ ${ENABLED} != true ]]; then
              echo "ERROR: Unexpected contents of 'enabled' field for CFS component '${TARGET_XNAME}': '${ENABLED}'"
              exit 1
            fi
            echo "CFS component '${TARGET_XNAME}' is enabled"

            # Retry CFS command if needed
            COUNT=0
            while true; do
                curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components/${TARGET_XNAME}" > ${TMPFILE}
                rc=$?
                cat ${TMPFILE}
                echo "rc = $rc"
                DESIRED_CONFIG=$(cat ${TMPFILE} | jq -r '.desiredConfig') && break
                let COUNT+=1
                if [[ ${COUNT} -gt 12 ]]; then
                    echo "ERROR: Even after retries, command pipeline failed querying CFS component '${TARGET_XNAME}'"
                    exit 1
                fi
                echo "WARNING: Command pipeline failed querying CFS component '${TARGET_XNAME}'. Retrying after 5 seconds."
                sleep 5
            done
            if [[ -z ${DESIRED_CONFIG} ]]; then
              echo "No desired configuration set"
              exit 0
            fi
            echo "Desired configuration for CFS component '${TARGET_XNAME}' is '${DESIRED_CONFIG}'"

            while true; do
              curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components?ids=${TARGET_XNAME}&status=pending" > ${TMPFILE}
              rc=$?
              cat ${TMPFILE}
              echo "rc = $rc"
              RESULT=$(cat ${TMPFILE} | jq length)
              echo "RESULT=$RESULT"
              if [[ "$RESULT" -eq 0 ]]; then
                break
              fi
              echo "Waiting for configuration to complete.  ${RESULT} components remaining."
              sleep 30
            done

            curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components?ids=${TARGET_XNAME}&status=configured" > ${TMPFILE}
            rc=$?
            cat ${TMPFILE}
            echo "rc = $rc"
            CONFIGURED=$(cat ${TMPFILE} | jq length)
            curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components?ids=${TARGET_XNAME}&status=failed" > ${TMPFILE}
            rc=$?
            cat ${TMPFILE}
            echo "rc = $rc"
            FAILED=$(cat ${TMPFILE} | jq length)
            echo "Configuration complete. $CONFIGURED component(s) completed successfully.  $FAILED component(s) failed."
            if [ "$FAILED" -ne "0" ]; then
              curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components?ids=${TARGET_XNAME}&status=failed" > ${TMPFILE}
              rc=$?
              cat ${TMPFILE}
              echo "rc = $rc"
              echo "The following components failed: $(cat ${TMPFILE}  | jq -r '. | map(.id) | join(",")')"
              exit 1
            fi
  - name: clear-cfs-state
    dependencies:
      - wait-for-cfs
    templateRef:
      name: kubectl-and-curl-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            set -x            
            TARGET_NCN={{ `{{inputs.parameters.targetNcn}}` }}            
            echo "TARGET_NCN=${TARGET_NCN}"
            TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
            echo "TARGET_XNAME=${TARGET_XNAME}"

            curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components/${TARGET_XNAME}"
            echo "rc = $?"

            curl -s -k -H "Authorization: Bearer ${TOKEN}" -X PATCH "https://api-gw-service-nmn.local/apis/cfs/v2/components/${TARGET_XNAME}" \
              -H 'Content-Type: application/json' \
              -d '{"enabled": false, "state": []}'
            echo "rc = $?"

            curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/cfs/v2/components/${TARGET_XNAME}"
            echo "rc = $?"
  - name: ensure-etcd-pods-are-healthy
    templateRef:
      name: ssh-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            set -x
            TMPFILE=/tmp/tmpout.$(date +%Y%m%d_%H%M%S).$$.$RANDOM
            echo "TMPFILE=${TMPFILE}"

            while true ; do
                kubectl get po -A -l 'app=cray-etcd-operator-etcd-operator-etcd-operator' > ${TMPFILE}
                rc=$?
                cat ${TMPFILE}
                echo "rc = $rc"
                [[ "$(kubectl get po -A -l 'app=cray-etcd-operator-etcd-operator-etcd-operator' | grep -v "Running"| wc -l)" == "1" ]] && break
                echo "Etcd operator is not in running state, wait for 5s ..."
                kubectl get po -A -l 'app=cray-etcd-operator-etcd-operator-etcd-operator' | grep -v "Running"
                sleep 5
            done

            export GOSS_BASE=/opt/cray/tests/install/ncn
            GOSS_ARG="--vars=/opt/cray/tests/install/ncn/vars/variables-ncn.yaml validate \
              --retry-timeout 1h \
              --sleep 1m"

            goss -g /opt/cray/tests/install/ncn/tests/goss-cray-service-etcd-health-check.yaml  ${GOSS_ARG}

            while [[ "$(kubectl get po -A -l 'app=etcd' | grep -v "Running"| wc -l)" != "1" ]]; do
                echo "Some etcd pods are not in running state, wait for 5s ..."
                kubectl get po -A -l 'app=etcd' | grep -v "Running"
                sleep 5
            done

            etcdClusters=$(kubectl get Etcdclusters -n services | grep "cray-"|awk '{print $1}')
            echo "etcdClusters=$etcdClusters"
            for cluster in $etcdClusters
            do
                echo "cluster=$cluster"
                while true; do
                  numOfPods=$(kubectl get pods -A -l 'app=etcd'| grep $cluster | grep "Running" | wc -l)
                  echo "cluster=$cluster numOfPods=$numOfPods"
                  if [[ $numOfPods -ne 3 ]];then
                    echo "ERROR - Etcd cluster: $cluster should have 3 pods running but only $numOfPods are running"
                    continue
                  else
                    echo "Etcd cluster: $cluster have 3 pods running"
                    break
                  fi
                done
            done
  - name: ensure-pg-pods-are-healthy
    templateRef:
      name: ssh-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            set -x
            export GOSS_BASE=/opt/cray/tests/install/ncn
            GOSS_ARG="--vars=/opt/cray/tests/install/ncn/vars/variables-ncn.yaml validate \
              --retry-timeout 1h \
              --sleep 1m"
            
            goss -g /opt/cray/tests/install/ncn/tests/goss-k8s-postgres-leader.yaml ${GOSS_ARG}

            goss -g /opt/cray/tests/install/ncn/tests/goss-k8s-postgres-clusters-running.yaml ${GOSS_ARG}

            goss -g /opt/cray/tests/install/ncn/tests/goss-k8s-postgres-pods-running.yaml ${GOSS_ARG}

            goss -g /opt/cray/tests/install/ncn/tests/goss-k8s-postgres-replication-lag.yaml ${GOSS_ARG}
  - name: ensure-critical-pods-are-running
    templateRef:
      name: kubectl-and-curl-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            set -x
            labels=( "cray-bss" "cray-scsd" )
            for label in ${labels[@]};do
              while true; do
                numOfRunningPods=$( kubectl get po -A -l "app.kubernetes.io/name=$label" | grep "Running"| wc -l)
                echo "label=$label numOfRunningPods=$numOfRunningPods"
                if [[ $numOfRunningPods -ge 2 ]]; then
                  echo "$label has met with the minimum requirement"
                  break;
                fi
                echo "$label hasn't met with the minimum requirement(2): $numOfRunningPods"
                sleep 5
              done
            done
  - name: "force-time-sync"
    templateRef:
      name: ssh-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            {{- include "common.envar" . | indent 12 }}
            set -x
            echo "TARGET_NCN = ${TARGET_NCN}"
            echo "TARGET_XNAME=${TARGET_XNAME}"
            echo "TARGET_MGMT_XNAME=${TARGET_MGMT_XNAME}"
            echo "TARGET_NCN_mgmt_host=${TARGET_NCN_mgmt_host}"            

            SSH_OPT="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

            ssh $SSH_OPT "$TARGET_NCN" "TOKEN=$TOKEN /srv/cray/scripts/common/chrony/csm_ntp.py"
            loop_idx=0
            in_sync=$(ssh $SSH_OPT "${TARGET_NCN}" timedatectl | awk /synchronized:/'{print $NF}')
            if [[ "$in_sync" == "no" ]]; then
                ssh $SSH_OPT "$TARGET_NCN" chronyc makestep
                sleep 5
                in_sync=$(ssh $SSH_OPT "${TARGET_NCN}" timedatectl | awk /synchronized:/'{print $NF}')
                # wait up to 90s for the node to be in sync
                while [[ $loop_idx -lt 18 && "$in_sync" == "no" ]]; do
                    sleep 5
                    in_sync=$(ssh $SSH_OPT "${TARGET_NCN}" timedatectl | awk /synchronized:/'{print $NF}')
                    loop_idx=$(( loop_idx+1 ))
                done
                if [[ "$in_sync" != "yes" ]]; then
                    exit 1
                fi
            fi
  - name: drain
    dependencies:
      - clear-cfs-state
      - ensure-etcd-pods-are-healthy
      - ensure-pg-pods-are-healthy
      - ensure-critical-pods-are-running
      - force-time-sync
    templateRef:
      name: kubectl-and-curl-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            set -x
            kubectl get node {{ `{{inputs.parameters.targetNcn}}` }} || res=$?
            echo "rc = $res"
            # only delete a ncn that exists in cluster
            if [[ $res -eq 0 ]]; then
              /host_usr_bin/csi automate ncn kubernetes --action delete-ncn --ncn {{ `{{inputs.parameters.targetNcn}}` }} --kubeconfig mykubeconfig/admin.conf
            fi
  - name: wait-for-postgres-operator
    dependencies:
      - drain
    templateRef:
      name: kubectl-and-curl-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            set -x
            TMPFILE=/tmp/tmpout.$(date +%Y%m%d_%H%M%S).$$.$RANDOM
            echo "TMPFILE=${TMPFILE}"
            while true; do
              kubectl get pods -n services -l app.kubernetes.io/name=postgres-operator > ${TMPFILE}
              rc=$?
              cat ${TMPFILE}
              echo "rc = $rc"
              numOfRunningPgOperatorPod=$(cat ${TMPFILE} | grep "Running" | wc -l)
              echo "numOfRunningPgOperatorPod=$numOfRunningPgOperatorPod"
              if [[ $numOfRunningPgOperatorPod -ne 1 ]];then
                echo "ERROR - Postgres Operator is not running yet"
                sleep 5
                continue
              else
                echo "Postgres Operator is running"
                break
              fi
            done
  - name: update-bss
    dependencies:
      - clear-cfs-state
      - ensure-etcd-pods-are-healthy
      - ensure-pg-pods-are-healthy
      - ensure-critical-pods-are-running
      - force-time-sync
    templateRef:
      name: kubectl-and-curl-template
      template: shell-script
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            set -x
            TARGET_NCN={{ `{{inputs.parameters.targetNcn}}` }}
            echo "TARGET_NCN=$TARGET_NCN"
            TARGET_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
                jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Xname")
            echo "TARGET_XNAME=$TARGET_XNAME"
            /host_usr_bin/csi handoff bss-update-param --delete metal.no-wipe --limit $TARGET_XNAME
            /host_usr_bin/csi handoff bss-update-param --set metal.no-wipe=0 --limit $TARGET_XNAME
{{end}}